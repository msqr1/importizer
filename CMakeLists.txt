cmake_minimum_required(VERSION 3.25)
project(importizer)
if(CMAKE_BINARY_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  message(FATAL_ERROR "In-source build is unsupported")
endif()

# Setup the 3rdParty folder
execute_process(
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/3rdParty"
  COMMAND ${CMAKE_COMMAND} -P Setup.cmake
)
include(CheckCXXCompilerFlag)

set(debugCompileFlags)
set(releaseCompileFlags)
set(debugLinkFlags)
set(releaseLinkFlags)

# Can take in another arg for linkFlagVar if required
function(ckAddFlag ckName compileFlagsVar flag)
  if(${ARGC} GREATER 3)
    set(CMAKE_REQUIRED_LINK_OPTIONS ${flag})
  endif()
  check_cxx_compiler_flag(${flag} ${ckName})
  unset(CMAKE_REQUIRED_LINK_OPTIONS)
  if(${ckName})
    set(${compileFlagsVar} ${compileFlagsVar} ${flag})
    if(${ARGC} GREATER 3)
      list(GET ${ARGN} 0 linkFlagsVar)
      set(${linkFlagsVar} ${linkFlagsVar} ${flag})
    endif()
  endif()
  unset(supported CACHE)
endfunction(ckAddFlag)
if(MSVC)
  add_compile_options(/W4)
  add_compile_options(/utf-8)
  ckAddFlag(ASAN debugFlags /fsanitize=address)
  ckAddFlag(noRTTI releaseFlags /GR-)
  ckAddFlag(LTO releaseFlags /GL)
else()
  add_compile_options(-Wall)
  ckAddFlag(OFP debugFlags -fno-omit-frame-pointer)
  ckAddFlag(ASAN debugFlags -fsanitize=address debugLinkFlags)
  ckAddFlag(UBSAN debugFlags -fsanitize=undefined debugLinkFlags)
  ckAddFlag(LSAN debugFlags -fsanitize=leak debugLinkFlags)
  ckAddFlag(noRTTI releaseFlags -fno-rtti)
  ckAddFlag(LTO releaseFlags -flto releaseLinkFlags)  
endif()
add_compile_options($<$<CONFIG:Debug>:${debugCompileFlags}> $<$<CONFIG:Release>:${releaseCompileFlag}>)
add_link_options($<$<CONFIG:Debug>:${debugLinkFlags}>  $<$<CONFIG:Release>:${releaseLinkFlag}>)
set(BUILD_SHARED_LIBS OFF)
add_subdirectory(src)
option(TESTS "Setup and run tests" OFF)
if(TESTS)
  add_subdirectory(test)
endif()