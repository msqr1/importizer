cmake_minimum_required(VERSION 3.25)
project(importizer)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
if(CMAKE_BINARY_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  message(FATAL_ERROR "In-source build is unsupported")
endif()

# Setup the 3rdParty folder
execute_process(
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/3rdParty"
  COMMAND ${CMAKE_COMMAND} -P Setup.cmake
)

set(debugCompileFlags)
set(releaseCompileFlags)
set(debugLinkFlags)
set(releaseLinkFlags)
include(CheckCXXCompilerFlag)

# Can take in at most another arg for link flag if required
function(ckAddFlag ckName compileFlagsVar flag)
  if(${ARGC} GREATER 3)
    set(CMAKE_REQUIRED_LINK_OPTIONS ${flag})
  endif()
  check_cxx_compiler_flag(${flag} ${ckName})
  unset(CMAKE_REQUIRED_LINK_OPTIONS)
  if(${ckName})
    set(${compileFlagsVar} "${${compileFlagsVar}} ${flag}" PARENT_SCOPE)
    if(${ARGC} GREATER 3)
      set(${ARGN} "${${ARGN}} ${flag}" PARENT_SCOPE)
    endif()
  endif()
endfunction(ckAddFlag)
if(MSVC)
  add_compile_options(/W4)
  add_compile_options(/utf-8)
  ckAddFlag(ASAN debugCompileFlags /fsanitize=address)
  ckAddFlag(noRTTI debugCompileFlags /GR-)
  ckAddFlag(noRTTI releaseCompileFlags /GR-)
  ckAddFlag(LTO releaseCompileFlags /GL)
else()
  add_compile_options(-Wall)
  ckAddFlag(OFP debugCompileFlags -fno-omit-frame-pointer)
  ckAddFlag(ASAN debugCompileFlags -fsanitize=address debugLinkFlags)
  ckAddFlag(UBSAN debugCompileFlags -fsanitize=undefined debugLinkFlags)
  ckAddFlag(LSAN debugCompileFlags -fsanitize=leak debugLinkFlags)
  ckAddFlag(noRTTI debugCompileFlags -fno-rtti)
  ckAddFlag(noRTTI releaseCompileFlags -fno-rtti)
  ckAddFlag(LTO releaseCompileFlags -flto releaseLinkFlags)
endif()
include(CMakePrintHelpers)
cmake_print_variables(debugCompileFlags)
cmake_print_variables(debugLinkFlags)
cmake_print_variables(releaseCompileFlags)
cmake_print_variables(releaseLinkFlags)
string(REPLACE " " ";" debugCompileFlags "${debugCompileFlags}")
string(REPLACE " " ";" debugLinkFlags "${debugLinkFlags}")
string(REPLACE " " ";" releaseCompileFlags "${releaseCompileFlags}")
string(REPLACE " " ";" releaseLinkFlags "${releaseLinkFlags}")
get_cmake_property(multiConfigGenerator GENERATOR_IS_MULTI_CONFIG)
if(multiConfigGenerator)
  message("Multi-config generator detected")
  add_compile_options("$<$<CONFIG:Debug>:${debugCompileFlags}>")
  add_link_options("$<$<CONFIG:Debug>:${debugLinkFlags}>")
  add_compile_options("$<$<CONFIG:Release>:${releaseCompileFlags}>")
  add_link_options("$<$<CONFIG:Release>:${releaseLinkFlags}>")
else()
  message("Single-config generator detected")
  if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
  endif()
  if(CMAKE_BUILD_TYPE STREQUAL Debug)
    add_compile_options(${debugCompileFlags})
    add_link_options(${debugLinkFlags})
  elseif(CMAKE_BUILD_TYPE STREQUAL Release)
    add_compile_options(${releaseCompileFlags})
    add_link_options(${releaseLinkFlags})
  else()
    message(FATAL_ERROR "Unknown build type, only Debug/Release are allowed")
  endif()
endif()
set(BUILD_SHARED_LIBS OFF)
add_subdirectory(src)
option(TESTS "Setup and run tests" OFF)
if(TESTS)
  add_subdirectory(test)
endif()